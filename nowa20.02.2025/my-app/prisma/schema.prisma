// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ============================================================================
// SYSTEM I UŻYTKOWNICY - zarządzanie użytkownikami i logowanie zdarzeń
// ============================================================================

model User {
  id Int @id @default(autoincrement())

  //logowanie
  login    String @unique
  password String

  //osoba
  username    String @default("default_username")
  userSurname String @default("default_surname")

  //daty tworzenia i aktualizacji
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //dostepy
  permissions Permission[] @relation("UserPermissions")
}

//MODEL DOSTĘPU DO RÓŻNYCH MODUŁÓW
model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique
  href        String
  description String
  users       User[] @relation("UserPermissions")
}

// ============================================================================
// MODELE PODSTAWOWE (SŁOWNIKI) - dane referencyjne
// ============================================================================

model Product {
  id   Int    @id @default(autoincrement())
  name String

  // Relacja do partii produkcji, które dotyczą danego produktu
  productionBatches ProductionBatch[]
}

model Supplier {
  id   Int    @id @default(autoincrement())
  name String

  // Relacja do partii produkcji związanych z dostawcą
  productionBatches ProductionBatch[]
}

model Recipient {
  id   Int    @id @default(autoincrement())
  name String

  // Relacja do partii produkcji, gdzie występuje odbiorca
  productionBatches ProductionBatch[]
}

model Machine {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  // Relacja do partii, które były liofilizowane przy użyciu danej maszyny
  productionBatches ProductionBatch[]
}

// ============================================================================
// MODELE GŁÓWNE - operacje biznesowe
// ============================================================================

// 🍏 Model Frakcji - mówi nam jak został pocięty/przetworzony produkt
// Frakcje to np. "Cały owoc", "Kostka", "Plasterki" itp.
model Fraction {
  id          Int     @id @default(autoincrement()) // Unikalny numerek każdej frakcji
  name        String  @unique // Nazwa frakcji, np. "Kostka"
  description String? // Opis frakcji (opcjonalny)

  // 🔄 Powiązanie: Tutaj łączymy frakcję z partiami produktów
  productionBatches ProductionBatch[]
}

// 📋 Model Statusu Partii - śledzi gdzie aktualnie znajduje się nasz produkt
// Statusy to np. "Przyjęty", "W mroźni", "W procesie liofilizacji", "Gotowy"
model BatchStatus {
  id          Int     @id @default(autoincrement()) // Unikalny numerek każdego statusu
  name        String  @unique // Nazwa statusu, np. "W mroźni"
  description String? // Dodatkowy opis statusu
  color       String? @default("#808080") // Kolor do wyświetlania w aplikacji

  // 🔄 Powiązanie: Tutaj łączymy status z partiami produktów
  productionBatches ProductionBatch[]
}

// 🏭 Główny model Partii Produkcyjnej - najważniejszy model!
// Śledzi całą "przygodę" produktu od przyjęcia do magazynu gotowych produktów
model ProductionBatch {
  id Int @id @default(autoincrement())

  // 🔑 Numer partii - najważniejszy identyfikator, np. "01-05-2023"
  batchNumber String @unique

  // 🔗 Powiązania z innymi modelami
  product    Product?  @relation(fields: [productId], references: [id]) // Co to za produkt?
  productId  Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id]) // Kto nam to dostarczył?
  supplierId Int?

  // 📊 Status i Frakcja
  status     BatchStatus? @relation(fields: [statusId], references: [id]) // Gdzie teraz jest produkt?
  statusId   Int?
  fraction   Fraction?    @relation(fields: [fractionId], references: [id]) // Jak został pocięty?
  fractionId Int?

  // ⏰ Daty procesu - kiedy co się działo z naszym produktem
  createdAt               DateTime  @default(now()) // Kiedy zaczęliśmy śledzić partię
  scheduledDate           DateTime? // Kiedy zaplanowaliśmy liofilizację
  freezerInDate           DateTime? // Kiedy produkt trafił do mroźni
  freezerOutDate          DateTime? // Kiedy wyjęliśmy z mroźni do liofilizacji
  lyophilizationStartDate DateTime? // Start suszenia (liofilizacji)
  lyophilizationEndDate   DateTime? // Koniec suszenia
  fractioningDate         DateTime? // Kiedy produkt został pocięty
  qualityControlDate      DateTime? // Data kontroli jakości
  finalProductDate        DateTime? // Kiedy stał się gotowym produktem

  // ⚖️ Wagi i ilości - śledzenie zmian wagi podczas procesu
  initialWeight            Float? // Ile ważył na początku
  postLyophilizationWeight Float? // Ile waży po wysuszeniu
  dryMassPercentage        Float? // Procent suchej masy (wyliczony automatycznie)
  rejectedWeight           Float? // Ile odrzuciliśmy podczas kontroli jakości
  finalWeight              Float? // Ostateczna waga produktu

  // 📝 Historia zmian - pamiętnik przygód naszego produktu
  statusHistory      StatusChange[] // Wszystkie zmiany statusu
  inventoryMovements InventoryMovement[] // Przesunięcia między magazynami

  // 📝 Miejsce na notatki i uwagi
  notes       String?
  Recipient   Recipient? @relation(fields: [recipientId], references: [id])
  recipientId Int?
  Machine     Machine?   @relation(fields: [machineId], references: [id])
  machineId   Int?
}

// 📜 Historia zmian statusu - zapisuje każdą zmianę statusu partii
// Np. kiedy produkt przeszedł z "W mroźni" do "W liofilizacji"
model StatusChange {
  id Int @id @default(autoincrement())

  // 🔗 Powiązanie z partią produkcyjną
  batch   ProductionBatch @relation(fields: [batchId], references: [id])
  batchId Int

  // Informacje o zmianie statusu
  oldStatus String? // Poprzedni status
  newStatus String // Nowy status
  changedAt DateTime @default(now()) // Kiedy nastąpiła zmiana
  changedBy String // Kto zmienił status
  notes     String? // Opcjonalne uwagi
}

// 🔄 Przesunięcia magazynowe - śledzenie ruchu produktu między magazynami
// Np. przesunięcie z mroźni do hali produkcyjnej
model InventoryMovement {
  id Int @id @default(autoincrement())

  // 🔗 Powiązanie z partią produkcyjną
  batch   ProductionBatch @relation(fields: [batchId], references: [id])
  batchId Int

  // Informacje o przesunięciu
  sourceLocation String // Skąd? (np. "Mroźnia")
  targetLocation String // Dokąd? (np. "Produkcja")
  weight         Float // Ile kilogramów przesunięto
  movedAt        DateTime @default(now()) // Kiedy przesunięto
  movedBy        String // Kto przesunął
  notes          String? // Opcjonalne uwagi
}
